{"version":3,"sources":["utils.ts","params.ts","PriceChart.tsx","App.tsx","index.tsx"],"names":["getRandomWalk","n","initValue","deltaMax","data","current","i","Math","random","push","fetchJson","url","a","fullUrl","process","fetch","then","res","text","JSON","parse","Error","message","nToFetch","pairs","console","log","pairFile","floor","length","prices","rangeToStart","start","round","slice","map","time","price","parseFloat","pairName","replace","pair","error","v","PriceChart","parsedPositions","yMax","hasFinished","lineProps","stroke","strokeDasharray","dotProps","fill","fillOpacity","xAxisProps","name","dy","interval","ReferenceLabel","props","textAnchor","viewBox","x","y","dataKey","domain","minTickGap","tickFormatter","timeStr","Date","toDateString","split","join","type","day","unit","hide","xFrom","xTo","yFrom","yTo","isWin","key","x1","x2","y1","y2","strokeOpacity","isOpen","label","isAnimationActive","strokeWidth","dot","App","useState","active","setActive","positions","setPositions","tick","setTick","setData","setPair","loading","setLoading","gameCount","setGameCount","canDo","isStart","doPosition","lastPosition","to","from","onChartClick","useEffect","timeout","setTimeout","_tick","clearInterval","fetchPriceData","catch","e","document","body","onkeyup","keyCode","_active","iFrom","iTo","min","marketGain","yourGain","reduce","factor","className","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4bd6b9f.chunk.js","sourcesContent":["import { pairsFile } from \"./params\";\nimport { DataPoint } from \"./types\";\n\nexport function getRandomWalk(\n  n: number,\n  initValue = 0,\n  deltaMax = 1\n): number[] {\n  const data: number[] = [];\n  let current = initValue;\n  for (let i = 0; i < n; i++) {\n    current += deltaMax * (Math.random() - 0.5);\n    if (current < 0) current = 0;\n    data.push(current);\n  }\n  return data;\n}\n\nexport async function fetchJson<T>(url: string): Promise<T> {\n  const fullUrl = process.env.PUBLIC_URL + \"/\" + url;\n  const data = await fetch(fullUrl).then(res => res.text());\n  try {\n    return JSON.parse(data);\n  } catch (e) {\n    throw Error(`Wrong data at ${fullUrl}: ${e.message} \\n ${data}`);\n  }\n}\n\n/**\n * Fetch a random pair from the available JSONs\n */\nexport async function fetchPriceData(\n  nToFetch: number\n): Promise<{\n  data: DataPoint[];\n  pair: string;\n}> {\n  try {\n    // Fetch index of available pairs, fetch one at random\n    const pairs = await fetchJson<string[]>(pairsFile);\n    console.log(`Pairs`, pairs);\n    const pairFile = pairs[Math.floor(Math.random() * pairs.length)];\n    const prices = await fetchJson<[[string, string]]>(pairFile);\n    console.log(`Received prices`, prices);\n\n    // Pick a random temporal range of the pair\n    const rangeToStart = prices.length - nToFetch;\n    const start = Math.round(rangeToStart * Math.random());\n    const data = prices\n      .slice(start, start + nToFetch)\n      .map(([time, price], i) => ({\n        i,\n        price: parseFloat(price),\n        time\n      }));\n\n    // Store the pair name\n    const pairName = pairFile\n      .replace(\".json\", \"\")\n      .replace(\"price/\", \"\")\n      .replace(\"USD\", \"\");\n\n    return { data, pair: pairName };\n  } catch (e) {\n    console.error(`Error fetching price data: ${e.message}`);\n\n    // In case of error, return a random walk\n    const data = getRandomWalk(nToFetch, 20, 5).map((v, i) => ({\n      i,\n      price: Math.round(100 * v) / 100,\n      time: `day ${i}`\n    }));\n\n    return { data, pair: \"RND\" };\n  }\n}\n","export const pairsFile = \"pairs.json\";\n","import React from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ReferenceArea,\n  ResponsiveContainer,\n  Line,\n  LineChart,\n  ReferenceLine,\n  ReferenceDot\n} from \"recharts\";\nimport \"./app.scss\";\nimport { ParsedPosition, DataPoint } from \"./types\";\n\nconst axisColor = \"white\";\nconst lineColor = \"red\";\nconst lessDarkColor = \"#414141\";\n\nexport default function PriceChart({\n  data,\n  parsedPositions,\n  yMax,\n  hasFinished\n}: {\n  data: DataPoint[];\n  parsedPositions: ParsedPosition[];\n  yMax: number;\n  hasFinished: boolean;\n}) {\n  const lineProps = {\n    stroke: \"gray\",\n    strokeDasharray: \"3 3\"\n  };\n  const dotProps = {\n    stroke: lessDarkColor,\n    fill: \"white\",\n    fillOpacity: 0.1\n  };\n  const xAxisProps = {\n    name: \"time\",\n    dy: 10, // Give the x-axis label some top margin\n    stroke: axisColor,\n    interval: \"preserveStartEnd\" as \"preserveStartEnd\"\n  };\n\n  /**\n   * Necesary to give white color to the label's text\n   */\n  function ReferenceLabel(props: any) {\n    const { textAnchor, viewBox, text } = props;\n    return (\n      <text\n        x={viewBox.x - 25}\n        y={viewBox.y + 15}\n        fill={\"white\"}\n        textAnchor={textAnchor}\n      >\n        {text}\n      </text>\n    );\n  }\n\n  return (\n    <ResponsiveContainer>\n      <LineChart>\n        {hasFinished ? (\n          <XAxis\n            dataKey=\"time\"\n            domain={[\"auto\", \"auto\"]}\n            minTickGap={50}\n            tickFormatter={timeStr =>\n              new Date(timeStr).toDateString().split(\" \").slice(1).join(\" \")\n            }\n            {...xAxisProps}\n          />\n        ) : (\n          <XAxis\n            dataKey=\"i\"\n            type=\"number\"\n            domain={[\"auto\", yMax]}\n            tickFormatter={day => `day ${day}`}\n            {...xAxisProps}\n          />\n        )}\n        <YAxis\n          dataKey=\"price\"\n          type=\"number\"\n          name=\"price\"\n          unit=\" $\"\n          domain={[\"auto\", \"auto\"]}\n          stroke={axisColor}\n          hide={!hasFinished}\n        />\n        <CartesianGrid strokeDasharray=\"3 3\" stroke={\"#292929\"} />\n        {parsedPositions.map(({ xFrom, xTo, yFrom, yTo, isWin }, i) => (\n          <ReferenceArea\n            key={`position-area-${i}`}\n            x1={xFrom}\n            x2={xTo}\n            y1={yFrom}\n            y2={yTo}\n            fill={isWin ? \"green\" : \"red\"}\n            stroke=\"gray\"\n            strokeOpacity={0.3}\n            fillOpacity={0.4}\n          />\n        ))}\n        {parsedPositions.map(({ xFrom }, i) => (\n          <ReferenceLine key={`buyline${i}`} x={xFrom} {...lineProps} />\n        ))}\n        {parsedPositions.map(({ xTo, isOpen }, i) =>\n          isOpen ? null : (\n            <ReferenceLine key={`sellline${i}`} x={xTo} {...lineProps} />\n          )\n        )}\n        {parsedPositions.map(({ xFrom, yFrom }, i) => (\n          <ReferenceDot\n            key={`buydot${i}`}\n            label={<ReferenceLabel text=\"Buy\" />}\n            x={xFrom}\n            y={yFrom}\n            {...dotProps}\n          />\n        ))}\n        {parsedPositions.map(({ xTo, yTo, isOpen }, i) =>\n          isOpen ? null : (\n            <ReferenceDot\n              key={`selldot${i}`}\n              label={<ReferenceLabel text=\"Sell\" />}\n              x={xTo}\n              y={yTo}\n              {...dotProps}\n            />\n          )\n        )}\n        <Line\n          isAnimationActive={false}\n          data={data}\n          type=\"monotone\"\n          dataKey=\"price\"\n          stroke={lineColor}\n          strokeWidth={2}\n          strokeOpacity={1}\n          dot={false}\n        />\n        {/* <ReferenceArea x1={tick} x2={100} y1={min} y2={max} fill=\"white\" fillOpacity={1} /> */}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { fetchPriceData } from \"./utils\";\nimport PriceChart from \"./PriceChart\";\nimport { Position, DataPoint, ParsedPosition } from \"./types\";\nimport { MdRefresh } from \"react-icons/md\";\nimport \"./app.scss\";\n\nconst n = 200;\nconst start = 30;\n\nexport default function App() {\n  const [active, setActive] = useState<boolean>(false);\n  const [positions, setPositions] = useState<Position[]>([]);\n  const [tick, setTick] = useState<number>(start);\n  const [data, setData] = useState<DataPoint[]>([]);\n  const [pair, setPair] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  // Used to re-trigger a fetch on game restart\n  const [gameCount, setGameCount] = useState<number>(0);\n  const canDo = tick < n;\n  const hasFinished = tick >= n;\n  const isStart = tick === start;\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (canDo && active && data.length > 0) setTick(_tick => _tick + 1);\n    }, 150);\n    return () => {\n      clearInterval(timeout);\n    };\n  }, [tick, active]);\n\n  useEffect(() => {\n    const nToFetch = n + 1;\n    setLoading(true);\n    fetchPriceData(nToFetch)\n      .then(({ data, pair }) => {\n        setData(data);\n        setPair(pair);\n      })\n      .catch(e => console.error(`Error fetching price data: ${e.message}`))\n      .then(() => {\n        setLoading(false);\n      });\n  }, [gameCount]);\n\n  function doPosition() {\n    if (hasFinished || data.length === 0) return;\n\n    const lastPosition = positions[positions.length - 1];\n    const positionIsOpen =\n      lastPosition && typeof lastPosition.to === \"undefined\";\n\n    if (positionIsOpen) {\n      if (lastPosition.from !== tick)\n        setPositions([\n          ...positions.slice(0, positions.length - 1),\n          {\n            ...lastPosition,\n            to: tick\n          }\n        ]);\n    } else {\n      setPositions([\n        ...positions,\n        {\n          from: tick\n        }\n      ]);\n    }\n  }\n\n  function onChartClick() {\n    if (!active) setActive(true);\n    doPosition();\n  }\n\n  function onRestartClick() {\n    // Hide the chart\n    setLoading(false);\n    // Reset player buys/sells\n    setPositions([]);\n    // Stop price walk\n    setActive(false);\n    // Restart the tick to zero\n    setTick(start);\n    // Increment game count to re-fetch\n    setGameCount(n => n + 1);\n  }\n\n  useEffect(() => {\n    document.body.onkeyup = function (e) {\n      if (e.keyCode === 32) {\n        // const currentPrice = prices[prices.length - 1]\n        // setActions((_actions: MarketAction[]) => {\n        //     const lastAction = _actions[_actions.length - 1]\n        //     return [..._actions, {\n        //         action: lastAction ? lastAction.action === \"in\" ? \"out\" : \"in\" : \"in\",\n        //         price: currentPrice.price,\n        //         time: currentPrice.time\n        //     }]\n        // })\n        console.log(\"SPACE!\");\n        doPosition();\n      }\n      if (e.keyCode === 13) {\n        setActive(_active => !_active);\n      }\n    };\n  });\n\n  // const onMoveThrottle = useMemo(() => throttle(onMove, 500), [])\n\n  function parsePosition({ from, to }: Position): ParsedPosition {\n    const iFrom = from;\n    const iTo = to ? Math.min(to, tick) : tick;\n    const xFrom = hasFinished ? (data[iFrom] || {}).time : iFrom;\n    const xTo = hasFinished ? (data[iTo] || {}).time : iTo;\n    const yFrom = (data[iFrom] || {}).price;\n    const yTo = (data[iTo] || {}).price;\n    const isWin = yTo > yFrom;\n    return { iFrom, iTo, xFrom, xTo, yFrom, yTo, isWin, isOpen: !to };\n  }\n\n  const parsedPositions = positions.map(parsePosition);\n\n  const marketGain = data.length\n    ? (data[tick].price - data[0].price) / data[0].price\n    : 0;\n  const yourFactor = parsedPositions.reduce(\n    (factor, { yFrom, yTo }) => factor * (yTo / yFrom),\n    1\n  );\n  const yourGain = yourFactor - 1;\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>\n          <strong>Beat</strong> the market\n        </h1>\n        <table>\n          <tbody>\n            <tr>\n              <th>Market</th>\n              <th>You</th>\n            </tr>\n            <tr>\n              <td>{Math.round(100 * marketGain)}%</td>\n              <td>{Math.round(100 * yourGain)}%</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      {isStart && (\n        <div className=\"instructions\" onClick={onChartClick}>\n          <div>\n            Click anywhere <br />\n            <strong>to start</strong>\n          </div>\n          <div className=\"help\">Click again to buy / sell</div>\n        </div>\n      )}\n\n      {hasFinished && (\n        <div className=\"restart\" onClick={onRestartClick}>\n          <big>Restart</big>\n          <small>\n            <MdRefresh />\n          </small>\n        </div>\n      )}\n\n      {hasFinished && (\n        <div className=\"market-name\">\n          <big>{pair} USD</big>\n          <small>{pair}</small>\n        </div>\n      )}\n\n      <div\n        className={`price-chart-container ${loading ? \"loading\" : \"\"}`}\n        onClick={onChartClick}\n      >\n        <PriceChart\n          data={data.slice(0, tick + 1)}\n          parsedPositions={parsedPositions}\n          yMax={n}\n          hasFinished={hasFinished}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}